---
# deploy mode:
#   devel: git from shared directory
#   docker: source, logs and and database from shared directory
#   standalone: checkout from github
deploy_mode: "devel"

# application server type:
#   devel: Flask built-in HTTP server
#   prod: Gunicorn HTTP server
server_type: "devel"

git_repository: "https://github.com/CSC-IT-Center-for-Science/pouta-blueprints.git"
git_version: "master"

apt_repository_url: "http://www.nic.funet.fi/pub/mirrors/archive.ubuntu.com/"
#apt_repository_url: "http://fi.mirrors.archive.ubuntu.com/ubuntu/"
#apt_repository_url: "mirror://mirrors.ubuntu.com/mirrors.txt"

# external service ports
application_external_http_port: 80
application_external_https_port: 443
application_external_http_port_worker: 1080
application_external_https_port_worker: 1443

virtualenv_path: "/webapps/{{ application_name }}/venv"
runtime_path: "/webapps/{{ application_name }}/run"
application_path: "/webapps/{{ application_name }}/source"
application_log_dir: "/webapps/{{ application_name }}/logs"
application_log_file: "{{ application_log_dir }}/gunicorn.log"
application_worker_endpoint_log_file: "{{ application_log_dir }}/gunicorn_worker_endpoint.log"
celery_log_file: "{{ application_log_dir }}/celery.log"
celery_system_log_file: "{{ application_log_dir }}/celery-system.log"
celerybeat_log_file: "{{ application_log_dir }}/celerybeat.log"
domain_name: "localhost"
application_name: "pouta_blueprints"
application_user: "{{ application_name }}"
application_group: "webapps"
application_debug_logging: True
application_secret_key: "change me"
application_config_dir: "/etc/{{ application_name }}"
application_config: "{{ application_config_dir }}/config.yaml"
application_database_name: "{{ application_name }}"
application_database_user: postgres
application_database_password: "{{ application_secret_key }}"
application_database_uri: "postgresql://postgres:{{ application_database_password }}@db/{{ application_database_name }}"
application_m2m_credentials_dir: "/run/shm/{{ application_name }}"
application_m2m_credentials_path: "{{ application_m2m_credentials_dir }}/creds"
shared_folder_path: "/shared_folder"
instance_data_dir: /var/spool/pb_instances

# frontend
frontend_proxy_config_dir: "{{ runtime_path }}/proxy_conf.d"

# gunicorn api worker processes
gunicorn_bind_address: "0.0.0.0"
gunicorn_bind_port: 8888
gunicorn_bind_port_worker: 8889
gunicorn_bind_endpoint: "api:{{ gunicorn_bind_port }}"
gunicorn_bind_endpoint_worker: "{{ gunicorn_bind_address }}:{{ gunicorn_bind_port_worker }}"
gunicorn_num_workers: "{{ 2 * ansible_processor_vcpus }}"
gunicorn_max_requests: 50

public_ipv4: "{{ ansible_eth0[\"ipv4\"][\"address\"] }}"
provisioning_log_file_root: "/webapps/{{ application_name }}/provisioning_logs"

# shibboleth; requires apache instead of nginx
enable_shibboleth: False
shibboleth_entity_id: "https://myserviceid.example.org"
shibboleth_discovery_url: "https://disco.example.org/shibboleth/WAYF"
shibboleth_metadata_url: "https://idp.exmaple.org/metadata.xml"
shibboleth_support_contact: "admin@example.org"

# nginx
nginx_static_root: "/webapps/{{ application_name }}/source/{{ application_name }}/static"
nginx_access_log_file: "{{application_log_dir}}/nginx_access.log"
nginx_error_log_file: "{{application_log_dir}}/nginx_error.log"
nginx_worker_access_log_file: "{{application_log_dir}}/nginx_worker_access.log"
nginx_worker_error_log_file: "{{application_log_dir}}/nginx_worker_error.log"
nginx_ssl_crt: "/etc/nginx/ssl/server.crt"
nginx_ssl_key: "/etc/nginx/ssl/server.key"

# provisioning workers
provisioning_num_workers: "{{ 2 if deploy_mode == 'devel' else 4 * ansible_processor_vcpus }}"

# pouta-virtualcluster
pvc_install_dir: "/opt/pvc"
#pvc_version: HEAD
pvc_version: "wip-for_pouta_blueprints"

# docker host
docker_host_app_root: "/opt/{{ application_name }}"
docker_host_m2m_credentials_dir: "/run/shm/{{ application_name }}"
docker_host_image_dir: "/var/lib/pb/docker_images"
docker_host_cert_dir: "/var/lib/pb/certs"
docker_host_sso_dir: "/var/lib/pb/sso"

# docker images
docker_image_redis: "redis:2.8"
docker_image_postgres: "postgres:9.3"
