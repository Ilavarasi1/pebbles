---
# deploy mode:
#   devel: git from shared directory
#   docker: source, logs and and database from shared directory
#   standalone: checkout from github
deploy_mode: "devel"

# which components to deploy on this host
deploy_www: True
deploy_worker: True
deploy_proxy: True
deploy_redis: True

# application server type:
#   devel: Flask built-in HTTP server
#   prod: Gunicorn HTTP server
server_type: "devel"

git_repository: "https://github.com/CSC-IT-Center-for-Science/pouta-blueprints.git"
git_version: "master"

apt_repository_url: "http://www.nic.funet.fi/pub/mirrors/archive.ubuntu.com/"
#apt_repository_url: "http://fi.mirrors.archive.ubuntu.com/ubuntu/"
#apt_repository_url: "mirror://mirrors.ubuntu.com/mirrors.txt"

virtualenv_path: "/webapps/{{ application_name }}/venv"
runtime_path: "/webapps/{{ application_name }}/run"
application_path: "/webapps/{{ application_name }}/source"
application_log_dir: "/webapps/{{ application_name }}/logs"
application_log_file: "{{ application_log_dir }}/gunicorn.log"
application_worker_endpoint_log_file: "{{ application_log_dir }}/gunicorn_worker_endpoint.log"
celery_log_file: "{{ application_log_dir }}/celery.log"
celery_system_log_file: "{{ application_log_dir }}/celery-system.log"
celerybeat_log_file: "{{ application_log_dir }}/celerybeat.log"
domain: "localhost"
application_name: "pouta_blueprints"
application_user: "{{ application_name }}"
application_group: "webapps"
application_debug_logging: "True"
application_secret_key: "change me"
application_config_dir: "/etc/{{ application_name }}"
application_config: "{{ application_config_dir }}/config.yaml"
application_database_uri: "sqlite:///{{ runtime_path }}/db.sqlite"
application_m2m_credentials_dir: "/run/shm/{{ application_name }}"
application_m2m_credentials_path: "{{ application_m2m_credentials_dir }}/creds"
shared_folder_path: "/shared_folder"
instance_data_dir: /var/spool/pb_instances
proxy_bind_address: "127.0.0.1"
proxy_bind_port: 8888
proxy_bind_port_worker: 8889
proxy_bind_endpoint: "{{ proxy_bind_address }}:{{ proxy_bind_port }}"
proxy_bind_endpoint_worker: "{{ proxy_bind_address }}:{{ proxy_bind_port_worker }}"
public_ipv4: "{{ ansible_eth0[\"ipv4\"][\"address\"] }}"
provisioning_log_file_root: "/webapps/{{ application_name }}/provisioning_logs"

# shibboleth; requires apache instead of nginx
enable_shibboleth: False
shibboleth_entity_id: "https://myserviceid.example.org"
shibboleth_discovery_url: "https://disco.example.org/shibboleth/WAYF"
shibboleth_cert: "example.crt"
shibboleth_metadata_url: "https://idp.exmaple.org/metadata.xml"
shibboleth_support_contact: "admin@example.org"

# apache
apache_static_root: "/webapps/{{ application_name }}/static"
apache_access_log_file: "{{ application_log_dir }}/apache_access.log"
apache_error_log_file: "{{ application_log_dir }}/apache_error.log"
apache_ssl_cert_dir: "/etc/apache2/ssl"
apache_ssl_crt: "{{ apache_ssl_cert_dir }}/server.crt"
apache_ssl_key: "{{ apache_ssl_cert_dir }}/server.key"
apache_ssl_chain: "{{ apache_ssl_cert_dir }}/chain.crt"
apache_server_admin_email: "admin@example.org"
apache_worker_access_log_file: "{{ application_log_dir }}/apache_worker_access.log"
apache_worker_error_log_file: "{{ application_log_dir }}/apache_worker_error.log"
apache_enable_ssl: yes

# gunicorn
gunicorn_num_workers: "{{ 2 * ansible_processor_vcpus }}"
gunicorn_max_requests: 50

# provisioning workers
provisioning_num_workers: "{{ 2 if deploy_mode == 'devel' else 4 * ansible_processor_vcpus }}"

# pouta-virtualcluster
pvc_install_dir: "/opt/pvc"
#pvc_version: HEAD
pvc_version: "wip-for_pouta_blueprints"

# docker host
docker_host_app_root: "/opt/{{ application_name }}"
docker_host_m2m_credentials_dir: "/run/shm/{{ application_name }}"
docker_host_image_dir: "/var/lib/pb/docker_images"
docker_host_cert_dir: "/var/lib/pb/certs"
docker_http_port: 80
docker_https_port: 443
docker_http_port_worker: 1080
docker_https_port_worker: 1443
public_https_proxy_port: 8443
internal_https_proxy_port: 8443
docker_api_host: www
docker_redis_host: redis
proxy_public_ipv4: "127.0.0.1"